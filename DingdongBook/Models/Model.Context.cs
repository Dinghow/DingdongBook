//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

namespace DingdongBook.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities1 : DbContext
    {
        public Entities1()
            : base("name=Entities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ADDRESS> ADDRESS { get; set; }
        public virtual DbSet<AUTHOR> AUTHOR { get; set; }
        public virtual DbSet<BOOK> BOOK { get; set; }
        public virtual DbSet<CART> CART { get; set; }
        public virtual DbSet<CART_INCLUDE> CART_INCLUDE { get; set; }
        public virtual DbSet<CATEGORY> CATEGORY { get; set; }
        public virtual DbSet<COMMENT_FEEDBACK> COMMENT_FEEDBACK { get; set; }
        public virtual DbSet<COMMENTS> COMMENTS { get; set; }
        public virtual DbSet<ORDER_INCLUDE> ORDER_INCLUDE { get; set; }
        public virtual DbSet<ORDERS> ORDERS { get; set; }
        public virtual DbSet<USERS> USERS { get; set; }
        public virtual DbSet<WRITE> WRITE { get; set; }
        public virtual DbSet<CARTLIST> CARTLIST { get; set; }
        public virtual DbSet<DINGDANGUANXI> DINGDANGUANXI { get; set; }
        public virtual DbSet<PURCHASE> PURCHASE { get; set; }
        public virtual DbSet<ZUOZHE> ZUOZHE { get; set; }
    
        public virtual int ADDCART1(Nullable<decimal> user, Nullable<decimal> bOOK, Nullable<decimal> price)
        {
            var userParameter = user.HasValue ?
                new ObjectParameter("user", user) :
                new ObjectParameter("user", typeof(decimal));
    
            var bOOKParameter = bOOK.HasValue ?
                new ObjectParameter("BOOK", bOOK) :
                new ObjectParameter("BOOK", typeof(decimal));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ADDCART1", userParameter, bOOKParameter, priceParameter);
        }
    }
}
